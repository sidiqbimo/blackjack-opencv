import cv2
import numpy as np

# Global variables for HSV bounds
hsv_lower_bound = np.array([0, 0, 70])
hsv_upper_bound = np.array([180, 40, 140])

# Function to update the HSV bounds from trackbars
def update_hsv_bounds(x):
    global hsv_lower_bound, hsv_upper_bound
    hsv_lower_bound = np.array([
        cv2.getTrackbarPos("Lower H", "Controls"),
        cv2.getTrackbarPos("Lower S", "Controls"),
        cv2.getTrackbarPos("Lower V", "Controls")
    ])
    hsv_upper_bound = np.array([
        cv2.getTrackbarPos("Upper H", "Controls"),
        cv2.getTrackbarPos("Upper S", "Controls"),
        cv2.getTrackbarPos("Upper V", "Controls")
    ])

# Function to draw a circle at the clicked point and update HSV bounds
def pick_color(event, x, y, flags, param):
    global hsv_lower_bound, hsv_upper_bound, frame
    if event == cv2.EVENT_LBUTTONDOWN:
        bgr_color = frame[y, x]
        hsv_lower_bound, hsv_upper_bound = get_hsv_bounds_from_bgr(bgr_color)
        update_trackbars()  # Update the trackbars to reflect the new bounds

def get_hsv_bounds_from_bgr(bgr_color, hue_tolerance=15, saturation_tolerance=50, value_tolerance=50):
    bgr_color = np.uint8([[bgr_color]])
    hsv_color = cv2.cvtColor(bgr_color, cv2.COLOR_BGR2HSV)[0][0]
    
    lower_bound = np.array([
        max(0, hsv_color[0] - hue_tolerance),
        max(0, hsv_color[1] - saturation_tolerance),
        max(0, hsv_color[2] - value_tolerance)
    ])
    upper_bound = np.array([
        min(180, hsv_color[0] + hue_tolerance),
        min(255, hsv_color[1] + saturation_tolerance),
        min(255, hsv_color[2] + value_tolerance)
    ])
    return lower_bound, upper_bound

# Function to update the trackbars when HSV bounds are changed by clicking
def update_trackbars():
    cv2.setTrackbarPos("Lower H", "Controls", hsv_lower_bound[0])
    cv2.setTrackbarPos("Lower S", "Controls", hsv_lower_bound[1])
    cv2.setTrackbarPos("Lower V", "Controls", hsv_lower_bound[2])
    cv2.setTrackbarPos("Upper H", "Controls", hsv_upper_bound[0])
    cv2.setTrackbarPos("Upper S", "Controls", hsv_upper_bound[1])
    cv2.setTrackbarPos("Upper V", "Controls", hsv_upper_bound[2])

# Initialize the camera
cam = cv2.VideoCapture(0)
if not cam.isOpened():
    print("Error: Couldn't open camera.")
    exit(1)

# Create an OpenCV window for control sliders
cv2.namedWindow("Controls")
cv2.createTrackbar("Lower H", "Controls", 0, 180, update_hsv_bounds)
cv2.createTrackbar("Lower S", "Controls", 0, 255, update_hsv_bounds)
cv2.createTrackbar("Lower V", "Controls", 0, 255, update_hsv_bounds)
cv2.createTrackbar("Upper H", "Controls", 180, 180, update_hsv_bounds)
cv2.createTrackbar("Upper S", "Controls", 255, 255, update_hsv_bounds)
cv2.createTrackbar("Upper V", "Controls", 255, 255, update_hsv_bounds)

# Set mouse callback for the OpenCV window
cv2.namedWindow("Combined View")
cv2.setMouseCallback("Combined View", pick_color)

while True:
    ret, frame = cam.read()
    if not ret:
        print("Error: Couldn't capture frame.")
        break

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Get updated HSV bounds from trackbars
    update_hsv_bounds(0)

    # Create mask with the dynamically set bounds
    mask = cv2.inRange(hsv, hsv_lower_bound, hsv_upper_bound)

    # Apply Gaussian Blur to reduce noise
    mask = cv2.GaussianBlur(mask, (5, 5), 0)

    # Refine the mask using erosion and dilation to clean up noise
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.erode(mask, kernel, iterations=2)
    mask = cv2.dilate(mask, kernel, iterations=2)

    # Invert the mask to isolate only non-background objects (e.g., cards)
    mask = cv2.bitwise_not(mask)
    foreground = cv2.bitwise_and(frame, frame, mask=mask)

    # Combine all frames into one display window
    combined_frame = np.hstack((frame, cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR), foreground))

    # Display the combined window
    cv2.imshow("Combined View", combined_frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cam.release()
cv2.destroyAllWindows()
